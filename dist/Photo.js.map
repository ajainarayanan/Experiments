{"version":3,"sources":["webpack:///./components/Photo/index.js","webpack:///./components/Modal/index.js","webpack:///../node_modules/mousetrap/mousetrap.js"],"names":["imgStyles","width","closeButtonStyles","textAlign","position","right","zIndex","top","background","padding","borderRadius","display","lineHeight","color","modalStyles","Photo","state","photoid","props","match","params","albumid","photoUrl","photoTitle","loading","notFound","redirect","fetchPhotoIndividually","fetch","then","res","json","photoDetails","console","log","statusCode","setState","photo","sizes","size","find","label","source","albumStoreSubscription","getPhotoDetails","getState","albumsDetails","Object","keys","map","length","currentAlbum","currentPhoto","id","url_h","title","bind","subscribe","newState","initialState","propTypes","object","location","appRoot","document","getElementById","modalContainerStyles","justifyContent","alignItems","left","height","backgroundColor","modalCustomStyles","overflowY","marginTop","modalLgDialogStyles","margin","maxWidth","modalSmDialogStyles","Modal","isOpen","toggleFunc","renderChildren","modalDialogSize","children","el","createElement","body","style","overflow","appendChild","removeChild","nextProps","createPortal","bool","func","node","oneOf","className","string","defaultProps"],"mappings":"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,YAAT,CAAsB,KAAKX,cAAL,EAAtB,EAA6C,KAAKG,EAAlD,CAAP;AACD;;;;;;AAxDkBN,K,CACZnB,S,GAAY;AACjBoB,UAAQ,oBAAUc,IADD;AAEjBb,cAAY,oBAAUc,IAFL;AAGjBX,YAAU,oBAAUY,IAHH;AAIjBzD,QAAM,oBAAU0D,KAAV,CAAgB,CAAC,IAAD,EAAO,IAAP,CAAhB,CAJW;AAKjBC,aAAW,oBAAUC;AALJ,C;AADApB,K,CAQZqB,Y,GAAe;AACpB7D,QAAM;AADc,C;kBARHwC,K;;;;;;;ACnDrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,MAAM;AACrB,eAAe,QAAQ;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA,8CAA8C,EAAE;AAChD;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,iBAAiB;AACpC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,MAAM;AACzB,mBAAmB,aAAa;AAChC,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,uCAAuC;AAC9D;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B,mBAAmB,MAAM;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,MAAM;AACzB,mBAAmB,MAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,sBAAsB;;AAE7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,MAAM;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,MAAM;AACzB,mBAAmB,SAAS;AAC5B,mBAAmB,QAAQ;AAC3B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,MAAM;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,SAAS;AAC5B,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,mDAAmD,kBAAkB;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,mBAAmB,MAAM;AACzB,mBAAmB,SAAS;AAC5B,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,SAAS;AACxB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,uDAAuD;AACvD;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,QAAQ;AACvB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AAAA;AACT;AACA,CAAC","file":"Photo.js","sourcesContent":["import PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport Modal from \"../Modal\";\nimport { albumStore } from \"../Albums/store\";\nimport { WithLoadingIndicator } from \"../LoadingIndicator\";\nimport { css } from \"glamor\";\nimport IconSVG from \"../IconSVG\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport \"whatwg-fetch\";\nimport Mousetrap from \"mousetrap\";\nimport Page404 from \"../Page404\";\n\nconst imgStyles = css({\n  width: \"100%\"\n});\nconst closeButtonStyles = css({\n  textAlign: \"right\",\n  position: \"absolute\",\n  right: \"20px\",\n  zIndex: \"2000\",\n  top: \"20px\",\n  background: \"white\",\n  padding: \"5px\",\n  borderRadius: \"50%\",\n  display: \"inline-flex\",\n  \"> a\": {\n    lineHeight: 1,\n    color: \"black\",\n    display: \"flex\"\n  }\n});\n\nconst modalStyles = css({\n  background: \"white\"\n});\n\nexport default class Photo extends Component {\n  static propTypes = {\n    match: PropTypes.object,\n    location: PropTypes.object\n  };\n\n  state = {\n    photoid: this.props.match.params.photoid,\n    albumid: this.props.match.params.albumid,\n    photoUrl: null,\n    photoTitle: null,\n    loading: true,\n    notFound: false,\n    redirect: false\n  };\n  fetchPhotoIndividually = async () => {\n    let photoDetails = await fetch(\n      `/api/photos/${this.state.photoid}`\n    ).then(res => res.json());\n\n    console.log(photoDetails);\n    if (photoDetails.statusCode === 404) {\n      this.setState({ notFound: true, loading: false });\n      return;\n    }\n    let photo = photoDetails.sizes.size.find(size => size.label === \"Original\");\n    if (photo) {\n      this.setState({\n        loading: false,\n        photoUrl: photo.source\n      });\n      if (this.albumStoreSubscription) {\n        this.albumStoreSubscription();\n      }\n    }\n  };\n\n  getPhotoDetails = () => {\n    let { albumsDetails } = albumStore.getState();\n    if (!Object.keys(albumsDetails.map).length) {\n      return;\n    }\n    let { params } = this.props.match;\n    let currentAlbum = albumsDetails.map[params.albumid];\n    let currentPhoto = currentAlbum.photo.find(\n      photo => photo.id === params.photoid\n    );\n    if (currentPhoto) {\n      return {\n        photoUrl: currentPhoto.url_h,\n        photoTitle: currentPhoto.title,\n        loading: false\n      };\n    }\n    this.fetchPhotoIndividually(this.state.photoid);\n    return false;\n  };\n  componentDidMount() {\n    Mousetrap.bind(\"esc\", () => this.setState({ redirect: true }));\n    this.albumStoreSubscription = albumStore.subscribe(() => {\n      let newState = this.getPhotoDetails();\n      if (newState) {\n        this.setState({\n          ...newState\n        });\n        return;\n      }\n    });\n    let initialState = this.getPhotoDetails();\n    if (initialState) {\n      this.setState({\n        ...initialState\n      });\n    }\n  }\n  componentWillUnmount() {\n    if (this.albumStoreSubscription) {\n      this.albumStoreSubscription();\n    }\n  }\n  render() {\n    if (this.state.redirect) {\n      return <Redirect to={`/albums/${this.state.albumid}`} />;\n    }\n    return (\n      <Modal isOpen={true} size=\"lg\">\n        <WithLoadingIndicator condition={this.state.loading}>\n          {this.state.notFound ? (\n            <Page404 />\n          ) : (\n            [\n              <div className={`${closeButtonStyles}`} key=\"icon\">\n                <Link to={`/albums/${this.state.albumid}`}>\n                  <IconSVG name=\"icon-cross\" />\n                </Link>\n              </div>,\n              <div\n                className={`modal-content ${modalStyles}`}\n                key=\"modal-content\"\n              >\n                <div className=\"modal-body\">\n                  <img\n                    src={this.state.photoUrl}\n                    alt={this.state.photoTitle}\n                    className={`${imgStyles}`}\n                  />\n                </div>\n              </div>\n            ]\n          )}\n        </WithLoadingIndicator>\n      </Modal>\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./components/Photo/index.js","import PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { css, media } from \"glamor\";\n\nconst appRoot = document.getElementById(\"app\");\nconst modalContainerStyles = css({\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  top: 0,\n  left: 0,\n  height: \"100vh\",\n  width: \"100vw\",\n  position: \"fixed\",\n  backgroundColor: \"rgba(0,0,0,0.5)\",\n  zIndex: \"2000\"\n});\nconst modalCustomStyles = css({\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  overflowY: \"auto\",\n  marginTop: \"60px\"\n});\n\nconst modalLgDialogStyles = css({\n  margin: 0,\n  width: \"100%\",\n  maxWidth: \"100%\",\n  height: \"100%\",\n  \"> div\": {\n    backgroundColor: \"white\"\n  }\n});\nconst modalSmDialogStyles = css(\n  {\n    margin: 0,\n    width: \"50%\",\n    maxWidth: \"50%\",\n    \"> div\": {\n      backgroundColor: \"white\"\n    }\n  },\n  media(\"(max-width: 768px)\", {\n    width: \"100%\",\n    maxWidth: \"100%\",\n    height: \"100%\"\n  })\n);\n\nexport default class Modal extends Component {\n  static propTypes = {\n    isOpen: PropTypes.bool,\n    toggleFunc: PropTypes.func,\n    children: PropTypes.node,\n    size: PropTypes.oneOf([\"sm\", \"lg\"]),\n    className: PropTypes.string\n  };\n  static defaultProps = {\n    size: \"lg\"\n  };\n  state = {\n    isOpen: this.props.isOpen,\n    toggleFunc: this.props.toggleFunc\n  };\n  constructor(props) {\n    super(props);\n    this.el = document.createElement(\"div\");\n  }\n\n  componentDidMount() {\n    document.body.style.overflow = \"hidden\";\n    appRoot.appendChild(this.el);\n  }\n\n  componentWillUnmount() {\n    document.body.style.overflow = \"auto\";\n    appRoot.removeChild(this.el);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.isOpen !== this.state.isOpen) {\n      this.setState({\n        isOpen: nextProps.isOpen\n      });\n    }\n  }\n\n  renderChildren = () => {\n    if (!this.state.isOpen) {\n      return null;\n    }\n    let modalDialogSize =\n      this.props.size === \"lg\" ? modalLgDialogStyles : modalSmDialogStyles;\n    return (\n      <div className={`${modalContainerStyles}`}>\n        <div className={`modal ${modalCustomStyles}`}>\n          <div className={`modal-dialog ${modalDialogSize}`}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  };\n  render() {\n    return ReactDOM.createPortal(this.renderChildren(), this.el);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./components/Modal/index.js","/*global define:false */\n/**\n * Copyright 2012-2017 Craig Campbell\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Mousetrap is a simple keyboard shortcut library for Javascript with\n * no external dependencies\n *\n * @version 1.6.1\n * @url craig.is/killing/mice\n */\n(function(window, document, undefined) {\n\n    // Check if mousetrap is used inside browser, if not, return\n    if (!window) {\n        return;\n    }\n\n    /**\n     * mapping of special keycodes to their corresponding keys\n     *\n     * everything in this dictionary cannot use keypress events\n     * so it has to be here to map to the correct keycodes for\n     * keyup/keydown events\n     *\n     * @type {Object}\n     */\n    var _MAP = {\n        8: 'backspace',\n        9: 'tab',\n        13: 'enter',\n        16: 'shift',\n        17: 'ctrl',\n        18: 'alt',\n        20: 'capslock',\n        27: 'esc',\n        32: 'space',\n        33: 'pageup',\n        34: 'pagedown',\n        35: 'end',\n        36: 'home',\n        37: 'left',\n        38: 'up',\n        39: 'right',\n        40: 'down',\n        45: 'ins',\n        46: 'del',\n        91: 'meta',\n        93: 'meta',\n        224: 'meta'\n    };\n\n    /**\n     * mapping for special characters so they can support\n     *\n     * this dictionary is only used incase you want to bind a\n     * keyup or keydown event to one of these keys\n     *\n     * @type {Object}\n     */\n    var _KEYCODE_MAP = {\n        106: '*',\n        107: '+',\n        109: '-',\n        110: '.',\n        111 : '/',\n        186: ';',\n        187: '=',\n        188: ',',\n        189: '-',\n        190: '.',\n        191: '/',\n        192: '`',\n        219: '[',\n        220: '\\\\',\n        221: ']',\n        222: '\\''\n    };\n\n    /**\n     * this is a mapping of keys that require shift on a US keypad\n     * back to the non shift equivelents\n     *\n     * this is so you can use keyup events with these keys\n     *\n     * note that this will only work reliably on US keyboards\n     *\n     * @type {Object}\n     */\n    var _SHIFT_MAP = {\n        '~': '`',\n        '!': '1',\n        '@': '2',\n        '#': '3',\n        '$': '4',\n        '%': '5',\n        '^': '6',\n        '&': '7',\n        '*': '8',\n        '(': '9',\n        ')': '0',\n        '_': '-',\n        '+': '=',\n        ':': ';',\n        '\\\"': '\\'',\n        '<': ',',\n        '>': '.',\n        '?': '/',\n        '|': '\\\\'\n    };\n\n    /**\n     * this is a list of special strings you can use to map\n     * to modifier keys when you specify your keyboard shortcuts\n     *\n     * @type {Object}\n     */\n    var _SPECIAL_ALIASES = {\n        'option': 'alt',\n        'command': 'meta',\n        'return': 'enter',\n        'escape': 'esc',\n        'plus': '+',\n        'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'\n    };\n\n    /**\n     * variable to store the flipped version of _MAP from above\n     * needed to check if we should use keypress or not when no action\n     * is specified\n     *\n     * @type {Object|undefined}\n     */\n    var _REVERSE_MAP;\n\n    /**\n     * loop through the f keys, f1 to f19 and add them to the map\n     * programatically\n     */\n    for (var i = 1; i < 20; ++i) {\n        _MAP[111 + i] = 'f' + i;\n    }\n\n    /**\n     * loop through to map numbers on the numeric keypad\n     */\n    for (i = 0; i <= 9; ++i) {\n\n        // This needs to use a string cause otherwise since 0 is falsey\n        // mousetrap will never fire for numpad 0 pressed as part of a keydown\n        // event.\n        //\n        // @see https://github.com/ccampbell/mousetrap/pull/258\n        _MAP[i + 96] = i.toString();\n    }\n\n    /**\n     * cross browser add event method\n     *\n     * @param {Element|HTMLDocument} object\n     * @param {string} type\n     * @param {Function} callback\n     * @returns void\n     */\n    function _addEvent(object, type, callback) {\n        if (object.addEventListener) {\n            object.addEventListener(type, callback, false);\n            return;\n        }\n\n        object.attachEvent('on' + type, callback);\n    }\n\n    /**\n     * takes the event and returns the key character\n     *\n     * @param {Event} e\n     * @return {string}\n     */\n    function _characterFromEvent(e) {\n\n        // for keypress events we should return the character as is\n        if (e.type == 'keypress') {\n            var character = String.fromCharCode(e.which);\n\n            // if the shift key is not pressed then it is safe to assume\n            // that we want the character to be lowercase.  this means if\n            // you accidentally have caps lock on then your key bindings\n            // will continue to work\n            //\n            // the only side effect that might not be desired is if you\n            // bind something like 'A' cause you want to trigger an\n            // event when capital A is pressed caps lock will no longer\n            // trigger the event.  shift+a will though.\n            if (!e.shiftKey) {\n                character = character.toLowerCase();\n            }\n\n            return character;\n        }\n\n        // for non keypress events the special maps are needed\n        if (_MAP[e.which]) {\n            return _MAP[e.which];\n        }\n\n        if (_KEYCODE_MAP[e.which]) {\n            return _KEYCODE_MAP[e.which];\n        }\n\n        // if it is not in the special map\n\n        // with keydown and keyup events the character seems to always\n        // come in as an uppercase character whether you are pressing shift\n        // or not.  we should make sure it is always lowercase for comparisons\n        return String.fromCharCode(e.which).toLowerCase();\n    }\n\n    /**\n     * checks if two arrays are equal\n     *\n     * @param {Array} modifiers1\n     * @param {Array} modifiers2\n     * @returns {boolean}\n     */\n    function _modifiersMatch(modifiers1, modifiers2) {\n        return modifiers1.sort().join(',') === modifiers2.sort().join(',');\n    }\n\n    /**\n     * takes a key event and figures out what the modifiers are\n     *\n     * @param {Event} e\n     * @returns {Array}\n     */\n    function _eventModifiers(e) {\n        var modifiers = [];\n\n        if (e.shiftKey) {\n            modifiers.push('shift');\n        }\n\n        if (e.altKey) {\n            modifiers.push('alt');\n        }\n\n        if (e.ctrlKey) {\n            modifiers.push('ctrl');\n        }\n\n        if (e.metaKey) {\n            modifiers.push('meta');\n        }\n\n        return modifiers;\n    }\n\n    /**\n     * prevents default for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _preventDefault(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n            return;\n        }\n\n        e.returnValue = false;\n    }\n\n    /**\n     * stops propogation for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _stopPropagation(e) {\n        if (e.stopPropagation) {\n            e.stopPropagation();\n            return;\n        }\n\n        e.cancelBubble = true;\n    }\n\n    /**\n     * determines if the keycode specified is a modifier key or not\n     *\n     * @param {string} key\n     * @returns {boolean}\n     */\n    function _isModifier(key) {\n        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';\n    }\n\n    /**\n     * reverses the map lookup so that we can look for specific keys\n     * to see what can and can't use keypress\n     *\n     * @return {Object}\n     */\n    function _getReverseMap() {\n        if (!_REVERSE_MAP) {\n            _REVERSE_MAP = {};\n            for (var key in _MAP) {\n\n                // pull out the numeric keypad from here cause keypress should\n                // be able to detect the keys from the character\n                if (key > 95 && key < 112) {\n                    continue;\n                }\n\n                if (_MAP.hasOwnProperty(key)) {\n                    _REVERSE_MAP[_MAP[key]] = key;\n                }\n            }\n        }\n        return _REVERSE_MAP;\n    }\n\n    /**\n     * picks the best action based on the key combination\n     *\n     * @param {string} key - character for key\n     * @param {Array} modifiers\n     * @param {string=} action passed in\n     */\n    function _pickBestAction(key, modifiers, action) {\n\n        // if no action was picked in we should try to pick the one\n        // that we think would work best for this key\n        if (!action) {\n            action = _getReverseMap()[key] ? 'keydown' : 'keypress';\n        }\n\n        // modifier keys don't work as expected with keypress,\n        // switch to keydown\n        if (action == 'keypress' && modifiers.length) {\n            action = 'keydown';\n        }\n\n        return action;\n    }\n\n    /**\n     * Converts from a string key combination to an array\n     *\n     * @param  {string} combination like \"command+shift+l\"\n     * @return {Array}\n     */\n    function _keysFromString(combination) {\n        if (combination === '+') {\n            return ['+'];\n        }\n\n        combination = combination.replace(/\\+{2}/g, '+plus');\n        return combination.split('+');\n    }\n\n    /**\n     * Gets info for a specific key combination\n     *\n     * @param  {string} combination key combination (\"command+s\" or \"a\" or \"*\")\n     * @param  {string=} action\n     * @returns {Object}\n     */\n    function _getKeyInfo(combination, action) {\n        var keys;\n        var key;\n        var i;\n        var modifiers = [];\n\n        // take the keys from this pattern and figure out what the actual\n        // pattern is all about\n        keys = _keysFromString(combination);\n\n        for (i = 0; i < keys.length; ++i) {\n            key = keys[i];\n\n            // normalize key names\n            if (_SPECIAL_ALIASES[key]) {\n                key = _SPECIAL_ALIASES[key];\n            }\n\n            // if this is not a keypress event then we should\n            // be smart about using shift keys\n            // this will only work for US keyboards however\n            if (action && action != 'keypress' && _SHIFT_MAP[key]) {\n                key = _SHIFT_MAP[key];\n                modifiers.push('shift');\n            }\n\n            // if this key is a modifier then add it to the list of modifiers\n            if (_isModifier(key)) {\n                modifiers.push(key);\n            }\n        }\n\n        // depending on what the key combination is\n        // we will try to pick the best event for it\n        action = _pickBestAction(key, modifiers, action);\n\n        return {\n            key: key,\n            modifiers: modifiers,\n            action: action\n        };\n    }\n\n    function _belongsTo(element, ancestor) {\n        if (element === null || element === document) {\n            return false;\n        }\n\n        if (element === ancestor) {\n            return true;\n        }\n\n        return _belongsTo(element.parentNode, ancestor);\n    }\n\n    function Mousetrap(targetElement) {\n        var self = this;\n\n        targetElement = targetElement || document;\n\n        if (!(self instanceof Mousetrap)) {\n            return new Mousetrap(targetElement);\n        }\n\n        /**\n         * element to attach key events to\n         *\n         * @type {Element}\n         */\n        self.target = targetElement;\n\n        /**\n         * a list of all the callbacks setup via Mousetrap.bind()\n         *\n         * @type {Object}\n         */\n        self._callbacks = {};\n\n        /**\n         * direct map of string combinations to callbacks used for trigger()\n         *\n         * @type {Object}\n         */\n        self._directMap = {};\n\n        /**\n         * keeps track of what level each sequence is at since multiple\n         * sequences can start out with the same sequence\n         *\n         * @type {Object}\n         */\n        var _sequenceLevels = {};\n\n        /**\n         * variable to store the setTimeout call\n         *\n         * @type {null|number}\n         */\n        var _resetTimer;\n\n        /**\n         * temporary state where we will ignore the next keyup\n         *\n         * @type {boolean|string}\n         */\n        var _ignoreNextKeyup = false;\n\n        /**\n         * temporary state where we will ignore the next keypress\n         *\n         * @type {boolean}\n         */\n        var _ignoreNextKeypress = false;\n\n        /**\n         * are we currently inside of a sequence?\n         * type of action (\"keyup\" or \"keydown\" or \"keypress\") or false\n         *\n         * @type {boolean|string}\n         */\n        var _nextExpectedAction = false;\n\n        /**\n         * resets all sequence counters except for the ones passed in\n         *\n         * @param {Object} doNotReset\n         * @returns void\n         */\n        function _resetSequences(doNotReset) {\n            doNotReset = doNotReset || {};\n\n            var activeSequences = false,\n                key;\n\n            for (key in _sequenceLevels) {\n                if (doNotReset[key]) {\n                    activeSequences = true;\n                    continue;\n                }\n                _sequenceLevels[key] = 0;\n            }\n\n            if (!activeSequences) {\n                _nextExpectedAction = false;\n            }\n        }\n\n        /**\n         * finds all callbacks that match based on the keycode, modifiers,\n         * and action\n         *\n         * @param {string} character\n         * @param {Array} modifiers\n         * @param {Event|Object} e\n         * @param {string=} sequenceName - name of the sequence we are looking for\n         * @param {string=} combination\n         * @param {number=} level\n         * @returns {Array}\n         */\n        function _getMatches(character, modifiers, e, sequenceName, combination, level) {\n            var i;\n            var callback;\n            var matches = [];\n            var action = e.type;\n\n            // if there are no events related to this keycode\n            if (!self._callbacks[character]) {\n                return [];\n            }\n\n            // if a modifier key is coming up on its own we should allow it\n            if (action == 'keyup' && _isModifier(character)) {\n                modifiers = [character];\n            }\n\n            // loop through all callbacks for the key that was pressed\n            // and see if any of them match\n            for (i = 0; i < self._callbacks[character].length; ++i) {\n                callback = self._callbacks[character][i];\n\n                // if a sequence name is not specified, but this is a sequence at\n                // the wrong level then move onto the next match\n                if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {\n                    continue;\n                }\n\n                // if the action we are looking for doesn't match the action we got\n                // then we should keep going\n                if (action != callback.action) {\n                    continue;\n                }\n\n                // if this is a keypress event and the meta key and control key\n                // are not pressed that means that we need to only look at the\n                // character, otherwise check the modifiers as well\n                //\n                // chrome will not fire a keypress if meta or control is down\n                // safari will fire a keypress if meta or meta+shift is down\n                // firefox will fire a keypress if meta or control is down\n                if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {\n\n                    // when you bind a combination or sequence a second time it\n                    // should overwrite the first one.  if a sequenceName or\n                    // combination is specified in this call it does just that\n                    //\n                    // @todo make deleting its own method?\n                    var deleteCombo = !sequenceName && callback.combo == combination;\n                    var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;\n                    if (deleteCombo || deleteSequence) {\n                        self._callbacks[character].splice(i, 1);\n                    }\n\n                    matches.push(callback);\n                }\n            }\n\n            return matches;\n        }\n\n        /**\n         * actually calls the callback function\n         *\n         * if your callback function returns false this will use the jquery\n         * convention - prevent default and stop propogation on the event\n         *\n         * @param {Function} callback\n         * @param {Event} e\n         * @returns void\n         */\n        function _fireCallback(callback, e, combo, sequence) {\n\n            // if this event should not happen stop here\n            if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) {\n                return;\n            }\n\n            if (callback(e, combo) === false) {\n                _preventDefault(e);\n                _stopPropagation(e);\n            }\n        }\n\n        /**\n         * handles a character key event\n         *\n         * @param {string} character\n         * @param {Array} modifiers\n         * @param {Event} e\n         * @returns void\n         */\n        self._handleKey = function(character, modifiers, e) {\n            var callbacks = _getMatches(character, modifiers, e);\n            var i;\n            var doNotReset = {};\n            var maxLevel = 0;\n            var processedSequenceCallback = false;\n\n            // Calculate the maxLevel for sequences so we can only execute the longest callback sequence\n            for (i = 0; i < callbacks.length; ++i) {\n                if (callbacks[i].seq) {\n                    maxLevel = Math.max(maxLevel, callbacks[i].level);\n                }\n            }\n\n            // loop through matching callbacks for this key event\n            for (i = 0; i < callbacks.length; ++i) {\n\n                // fire for all sequence callbacks\n                // this is because if for example you have multiple sequences\n                // bound such as \"g i\" and \"g t\" they both need to fire the\n                // callback for matching g cause otherwise you can only ever\n                // match the first one\n                if (callbacks[i].seq) {\n\n                    // only fire callbacks for the maxLevel to prevent\n                    // subsequences from also firing\n                    //\n                    // for example 'a option b' should not cause 'option b' to fire\n                    // even though 'option b' is part of the other sequence\n                    //\n                    // any sequences that do not match here will be discarded\n                    // below by the _resetSequences call\n                    if (callbacks[i].level != maxLevel) {\n                        continue;\n                    }\n\n                    processedSequenceCallback = true;\n\n                    // keep a list of which sequences were matches for later\n                    doNotReset[callbacks[i].seq] = 1;\n                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);\n                    continue;\n                }\n\n                // if there were no sequence matches but we are still here\n                // that means this is a regular match so we should fire that\n                if (!processedSequenceCallback) {\n                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo);\n                }\n            }\n\n            // if the key you pressed matches the type of sequence without\n            // being a modifier (ie \"keyup\" or \"keypress\") then we should\n            // reset all sequences that were not matched by this event\n            //\n            // this is so, for example, if you have the sequence \"h a t\" and you\n            // type \"h e a r t\" it does not match.  in this case the \"e\" will\n            // cause the sequence to reset\n            //\n            // modifier keys are ignored because you can have a sequence\n            // that contains modifiers such as \"enter ctrl+space\" and in most\n            // cases the modifier key will be pressed before the next key\n            //\n            // also if you have a sequence such as \"ctrl+b a\" then pressing the\n            // \"b\" key will trigger a \"keypress\" and a \"keydown\"\n            //\n            // the \"keydown\" is expected when there is a modifier, but the\n            // \"keypress\" ends up matching the _nextExpectedAction since it occurs\n            // after and that causes the sequence to reset\n            //\n            // we ignore keypresses in a sequence that directly follow a keydown\n            // for the same character\n            var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;\n            if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {\n                _resetSequences(doNotReset);\n            }\n\n            _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';\n        };\n\n        /**\n         * handles a keydown event\n         *\n         * @param {Event} e\n         * @returns void\n         */\n        function _handleKeyEvent(e) {\n\n            // normalize e.which for key events\n            // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion\n            if (typeof e.which !== 'number') {\n                e.which = e.keyCode;\n            }\n\n            var character = _characterFromEvent(e);\n\n            // no character found then stop\n            if (!character) {\n                return;\n            }\n\n            // need to use === for the character check because the character can be 0\n            if (e.type == 'keyup' && _ignoreNextKeyup === character) {\n                _ignoreNextKeyup = false;\n                return;\n            }\n\n            self.handleKey(character, _eventModifiers(e), e);\n        }\n\n        /**\n         * called to set a 1 second timeout on the specified sequence\n         *\n         * this is so after each key press in the sequence you have 1 second\n         * to press the next key before you have to start over\n         *\n         * @returns void\n         */\n        function _resetSequenceTimer() {\n            clearTimeout(_resetTimer);\n            _resetTimer = setTimeout(_resetSequences, 1000);\n        }\n\n        /**\n         * binds a key sequence to an event\n         *\n         * @param {string} combo - combo specified in bind call\n         * @param {Array} keys\n         * @param {Function} callback\n         * @param {string=} action\n         * @returns void\n         */\n        function _bindSequence(combo, keys, callback, action) {\n\n            // start off by adding a sequence level record for this combination\n            // and setting the level to 0\n            _sequenceLevels[combo] = 0;\n\n            /**\n             * callback to increase the sequence level for this sequence and reset\n             * all other sequences that were active\n             *\n             * @param {string} nextAction\n             * @returns {Function}\n             */\n            function _increaseSequence(nextAction) {\n                return function() {\n                    _nextExpectedAction = nextAction;\n                    ++_sequenceLevels[combo];\n                    _resetSequenceTimer();\n                };\n            }\n\n            /**\n             * wraps the specified callback inside of another function in order\n             * to reset all sequence counters as soon as this sequence is done\n             *\n             * @param {Event} e\n             * @returns void\n             */\n            function _callbackAndReset(e) {\n                _fireCallback(callback, e, combo);\n\n                // we should ignore the next key up if the action is key down\n                // or keypress.  this is so if you finish a sequence and\n                // release the key the final key will not trigger a keyup\n                if (action !== 'keyup') {\n                    _ignoreNextKeyup = _characterFromEvent(e);\n                }\n\n                // weird race condition if a sequence ends with the key\n                // another sequence begins with\n                setTimeout(_resetSequences, 10);\n            }\n\n            // loop through keys one at a time and bind the appropriate callback\n            // function.  for any key leading up to the final one it should\n            // increase the sequence. after the final, it should reset all sequences\n            //\n            // if an action is specified in the original bind call then that will\n            // be used throughout.  otherwise we will pass the action that the\n            // next key in the sequence should match.  this allows a sequence\n            // to mix and match keypress and keydown events depending on which\n            // ones are better suited to the key provided\n            for (var i = 0; i < keys.length; ++i) {\n                var isFinal = i + 1 === keys.length;\n                var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);\n                _bindSingle(keys[i], wrappedCallback, action, combo, i);\n            }\n        }\n\n        /**\n         * binds a single keyboard combination\n         *\n         * @param {string} combination\n         * @param {Function} callback\n         * @param {string=} action\n         * @param {string=} sequenceName - name of sequence if part of sequence\n         * @param {number=} level - what part of the sequence the command is\n         * @returns void\n         */\n        function _bindSingle(combination, callback, action, sequenceName, level) {\n\n            // store a direct mapped reference for use with Mousetrap.trigger\n            self._directMap[combination + ':' + action] = callback;\n\n            // make sure multiple spaces in a row become a single space\n            combination = combination.replace(/\\s+/g, ' ');\n\n            var sequence = combination.split(' ');\n            var info;\n\n            // if this pattern is a sequence of keys then run through this method\n            // to reprocess each pattern one key at a time\n            if (sequence.length > 1) {\n                _bindSequence(combination, sequence, callback, action);\n                return;\n            }\n\n            info = _getKeyInfo(combination, action);\n\n            // make sure to initialize array if this is the first time\n            // a callback is added for this key\n            self._callbacks[info.key] = self._callbacks[info.key] || [];\n\n            // remove an existing match if there is one\n            _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);\n\n            // add this call back to the array\n            // if it is a sequence put it at the beginning\n            // if not put it at the end\n            //\n            // this is important because the way these are processed expects\n            // the sequence ones to come first\n            self._callbacks[info.key][sequenceName ? 'unshift' : 'push']({\n                callback: callback,\n                modifiers: info.modifiers,\n                action: info.action,\n                seq: sequenceName,\n                level: level,\n                combo: combination\n            });\n        }\n\n        /**\n         * binds multiple combinations to the same callback\n         *\n         * @param {Array} combinations\n         * @param {Function} callback\n         * @param {string|undefined} action\n         * @returns void\n         */\n        self._bindMultiple = function(combinations, callback, action) {\n            for (var i = 0; i < combinations.length; ++i) {\n                _bindSingle(combinations[i], callback, action);\n            }\n        };\n\n        // start!\n        _addEvent(targetElement, 'keypress', _handleKeyEvent);\n        _addEvent(targetElement, 'keydown', _handleKeyEvent);\n        _addEvent(targetElement, 'keyup', _handleKeyEvent);\n    }\n\n    /**\n     * binds an event to mousetrap\n     *\n     * can be a single key, a combination of keys separated with +,\n     * an array of keys, or a sequence of keys separated by spaces\n     *\n     * be sure to list the modifier keys first to make sure that the\n     * correct key ends up getting bound (the last key in the pattern)\n     *\n     * @param {string|Array} keys\n     * @param {Function} callback\n     * @param {string=} action - 'keypress', 'keydown', or 'keyup'\n     * @returns void\n     */\n    Mousetrap.prototype.bind = function(keys, callback, action) {\n        var self = this;\n        keys = keys instanceof Array ? keys : [keys];\n        self._bindMultiple.call(self, keys, callback, action);\n        return self;\n    };\n\n    /**\n     * unbinds an event to mousetrap\n     *\n     * the unbinding sets the callback function of the specified key combo\n     * to an empty function and deletes the corresponding key in the\n     * _directMap dict.\n     *\n     * TODO: actually remove this from the _callbacks dictionary instead\n     * of binding an empty function\n     *\n     * the keycombo+action has to be exactly the same as\n     * it was defined in the bind method\n     *\n     * @param {string|Array} keys\n     * @param {string} action\n     * @returns void\n     */\n    Mousetrap.prototype.unbind = function(keys, action) {\n        var self = this;\n        return self.bind.call(self, keys, function() {}, action);\n    };\n\n    /**\n     * triggers an event that has already been bound\n     *\n     * @param {string} keys\n     * @param {string=} action\n     * @returns void\n     */\n    Mousetrap.prototype.trigger = function(keys, action) {\n        var self = this;\n        if (self._directMap[keys + ':' + action]) {\n            self._directMap[keys + ':' + action]({}, keys);\n        }\n        return self;\n    };\n\n    /**\n     * resets the library back to its initial state.  this is useful\n     * if you want to clear out the current keyboard shortcuts and bind\n     * new ones - for example if you switch to another page\n     *\n     * @returns void\n     */\n    Mousetrap.prototype.reset = function() {\n        var self = this;\n        self._callbacks = {};\n        self._directMap = {};\n        return self;\n    };\n\n    /**\n     * should we stop this event before firing off callbacks\n     *\n     * @param {Event} e\n     * @param {Element} element\n     * @return {boolean}\n     */\n    Mousetrap.prototype.stopCallback = function(e, element) {\n        var self = this;\n\n        // if the element has the class \"mousetrap\" then no need to stop\n        if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\n            return false;\n        }\n\n        if (_belongsTo(element, self.target)) {\n            return false;\n        }\n\n        // stop for input, select, and textarea\n        return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;\n    };\n\n    /**\n     * exposes _handleKey publicly so it can be overwritten by extensions\n     */\n    Mousetrap.prototype.handleKey = function() {\n        var self = this;\n        return self._handleKey.apply(self, arguments);\n    };\n\n    /**\n     * allow custom key mappings\n     */\n    Mousetrap.addKeycodes = function(object) {\n        for (var key in object) {\n            if (object.hasOwnProperty(key)) {\n                _MAP[key] = object[key];\n            }\n        }\n        _REVERSE_MAP = null;\n    };\n\n    /**\n     * Init the global mousetrap functions\n     *\n     * This method is needed to allow the global mousetrap functions to work\n     * now that mousetrap is a constructor function.\n     */\n    Mousetrap.init = function() {\n        var documentMousetrap = Mousetrap(document);\n        for (var method in documentMousetrap) {\n            if (method.charAt(0) !== '_') {\n                Mousetrap[method] = (function(method) {\n                    return function() {\n                        return documentMousetrap[method].apply(documentMousetrap, arguments);\n                    };\n                } (method));\n            }\n        }\n    };\n\n    Mousetrap.init();\n\n    // expose mousetrap to the global object\n    window.Mousetrap = Mousetrap;\n\n    // expose as a common js module\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = Mousetrap;\n    }\n\n    // expose mousetrap as an AMD module\n    if (typeof define === 'function' && define.amd) {\n        define(function() {\n            return Mousetrap;\n        });\n    }\n}) (typeof window !== 'undefined' ? window : null, typeof  window !== 'undefined' ? document : null);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/mousetrap/mousetrap.js\n// module id = 540\n// module chunks = 7"],"sourceRoot":""}